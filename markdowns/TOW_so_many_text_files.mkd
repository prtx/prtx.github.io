#TOW so many text files

Now that the wheels are in motion lets dig a little deeper. We are now about to work more or less with dictionaries, lists and files

-----

##Assignment 2.1: Call me maybe

Make a telephone directory. What information you would want to store depends on your preferences and requirements. I dont have good choice of pictures.

![Alt text](http://cdn.smosh.com/sites/default/files/bloguploads/funny-call-me-maybe-magby-pokemon.jpg)

####Requirements
1. Create a dictionary. Store your telephone index in it.
2. It should store multiple telephone number for a phttp://cdn.smosh.com/sites/default/files/bloguploads/funny-call-me-maybe-magby-pokemon.jpgerson.
3. Display all information in the index in a comprehensible manner.
4. Information should be sorted by name.
5. Implememnt search within dictionary by name and/or phone number.
6. Create multiple functions and make logical sense with it.
7. Also provide an option to store all information in csv(decide which delimeter to use).

**Key Concepts:** Dictionaries, keys, lists, loops, functions, file writing

##Assignment 2.2: Khaun Banega Kharodphathi

This is a classic game of Who wants to be a Millionaire. Build and play.

####Requirements
1. The game should ask 10 questions in total each involving certain amount of money. You loose with one wrong answer and would have to start over.
2. Create a csv files of questions, options and answers(decide which delimeter to use). It should countain about 30 questions that can be divided into 10 difficulty groups. Each time a question would be randomly selected from its respective groups.
3. There would also be lifelines in the game. 50-50 (remove 2 wrong options) should be allowed twice throughout the game. after the 4th question player should also be allowed to flip the question (choose another question from the difficulty group). Even if user flips the question make them answer it without any consequenses to the game.
4. Make the game as interactive and clise to real life show as possible.

**Key Concepts:** File reading, loops, conditions